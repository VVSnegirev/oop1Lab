/*Создать класс (Класс1) реализующий интерфейс (Интерфейс 1) некоторого обработчика текста введенным пользователем с консоли, выполняющий Операцию 1. Имеющего наследника с дополнительной функцией (Унаследованный_класс 1) . Который в свою очередь имеет еще одного наследника с переопределенной функцией унаследованной от Класса 1 (Унаследованный_класс 2). Диаграмма представлена справа.

Пользователю предлагается выбор. Вариант 1 и Вариант 2. После этого, если выбран вариант 1 то создается экземпляр класса 1го наследника. Соответственно если второй, то второго класса наследника. Далее пользователю предлагается ввести некоторый текст. И выбрать одно из двух действий, которые необходимо сделать с текстом (Операция 1 или Операция 2).

Операция 1 основоного класса: Метод шифрования текста шифром Цезаря, по сдвигу n, n задается пользователем.
Операция 2 : Вывод символа с самым большим порядковым номером
Операция 1 после переопределения: Метод расшифровки текста, по сдвигу n.
Структура:
Интерфейс +method <-- Класс 1 -Атрибут 1: тип -Атрибут 2: тип -Атрибут 3: тип + операция 1() <-- Унаследованный класс 1 -Операция 2() <--Унаследованный класс 2 -Операция 1() переопределенная*/

// Импортируем класс Scanner и стандартного пакета java.util
import java.util.Scanner;

//
interface TextProcessor { //Создаем интерфейс TextProcessor
    String processText(String text, int n); //Объявляем метод processText, который принимает строку text и целое число n
}

// Базовый класс, реализующий интерфейс
class BaseTextProcessor implements TextProcessor {
    // Атрибуты
    protected String attribute1;
    protected int attribute2;
    protected boolean attribute3;

    // Конструктор
    public BaseTextProcessor(String attribute1, int attribute2, boolean attribute3) {
        this.attribute1 = attribute1;
        this.attribute2 = attribute2;
        this.attribute3 = attribute3;
    }

    // Операция 1: Шифрование текста шифром Цезаря
    @Override
    public String processText(String text, int n) {
        StringBuilder result = new StringBuilder();
        for (char character : text.toCharArray()) {
            if (character != ' ') {
                int originalAlphabetPosition = character - 'a';
                int newAlphabetPosition = (originalAlphabetPosition + n) % 26;
                char newCharacter = (char) ('a' + newAlphabetPosition);
                result.append(newCharacter);
            } else {
                result.append(character);
            }
        }
        return result.toString();
    }
}

// Первый наследник с дополнительной функцией
class InheritedTextProcessor1 extends BaseTextProcessor {

    public InheritedTextProcessor1(String attribute1, int attribute2, boolean attribute3) {
        super(attribute1, attribute2, attribute3);
    }

    // Операция 2: Вывод символа с самым большим порядковым номером
    public char findMaxChar(String text) {
        char maxChar = 0;
        for (char c : text.toCharArray()) {
            if (c > maxChar) {
                maxChar = c;
            }
        }
        return maxChar;
    }
}

// Второй наследник с переопределенной функцией
class InheritedTextProcessor2 extends BaseTextProcessor {

    public InheritedTextProcessor2(String attribute1, int attribute2, boolean attribute3) {
        super(attribute1, attribute2, attribute3);
    }

    // Переопределенная операция 1: Расшифровка текста шифром Цезаря
    @Override
    public String processText(String text, int n) {
        return super.processText(text, 26 - n); // Используем обратный сдвиг для расшифровки
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Выберите вариант: 1 или 2");
        int choice = scanner.nextInt();
        scanner.nextLine(); // consume newline

        BaseTextProcessor processor;
        if (choice == 1) {
            processor = new InheritedTextProcessor1("Attr1", 10, true);
        } else {
            processor = new InheritedTextProcessor2("Attr1", 10, true);
        }

        System.out.println("Введите текст:");
        String text = scanner.nextLine();
        System.out.println("Выберите операцию: 1 или 2");
        int operation = scanner.nextInt();

        if (operation == 1) {
            System.out.println("Введите сдвиг для шифра Цезаря:");
            int shift = scanner.nextInt();
            System.out.println("Результат: " + processor.processText(text, shift));
        } else if (processor instanceof InheritedTextProcessor1) {
            System.out.println("Символ с самым большим порядковым номером: " +
                    ((InheritedTextProcessor1) processor).findMaxChar(text));
        } else {
            System.out.println("Операция 2 недоступна для этого процессора.");
        }
    }
}
